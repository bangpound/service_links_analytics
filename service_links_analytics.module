<?php

/**
 * Returns analytics for a URL.
 */
function service_links_analytics_data($entity_type, $entity) {
  $uri = entity_uri($entity_type, $entity);
  //$uri['options']['absolute'] = TRUE;
  $url = 'http://electronicintifada.net'. url($uri['path'], $uri['options']);
  $row = new stdClass();
  $service_ids = array('google_plus_one', 'twitter', 'facebook', 'reddit', 'linkedin', 'delicious', 'stumbleupon', 'pinterest');
  $services = service_links_get_links($service_ids);
  foreach ($services as $service_id => $service) {
    if (!isset($service['analytics_callback'])) {
      $tag = array(
        'encoded-url' => '<encoded-url>',
      );
      $subst = array(
        'encoded-url' => $url,
      );
      $analytics_url = str_replace($tag, $subst, $service['analytics']);
      $result = drupal_http_request($analytics_url);
      if ($result->code == 200) {
        $data = drupal_json_decode($result->data);
        if (!$data) {
          $data = drupal_json_decode(preg_replace('/.+?({.+}).+/', '$1', $result->data));
        }
        switch ($service_id) {
          case 'facebook':
            $row->fb_share_count = $data[0]['share_count'];
            $row->fb_like_count = $data[0]['like_count'];
            $row->fb_comment_count = $data[0]['comment_count'];
            $row->fb_total_count = $data[0]['total_count'];
            break;

          case 'twitter':
            $row->twitter_count = $data['count'];
            break;

          case 'reddit':
            $row->reddit_count = 0;
            foreach ($data['data']['children'] as $child) {
              $row->reddit_count += $child['data']['score'];
            }
            break;

          case 'linkedin':
            $row->linkedin_count = $data['count'];
            break;

          case 'delicious':
            if (!empty($data)) {
              $row->delicious_count = $data[0]['total_posts'];
            }
            break;

          case 'stumbleupon':
            if ($data['result']['in_index']) {
              $row->stumbleupon_count = $data['result']['views'];
            }
            break;

          case 'pinterest':
            if (isset($data['count'])) {
              $row->pinterest_count = $data['count'];
            }
            break;
        }
      }
    }
    else {
      $result = $service['analytics_callback']($url);
      switch ($service_id) {
        case 'google_plus_one':
          $row->google_plus_one_count = $result;
          break;
      }
    }
  }
  return $row;
}

/**
 * Loads statistics for a URL.
 */
function service_links_analytics_load($entity_type, $entity_id) {
  $result = db_select('service_links_analytics', 'a')
    ->fields('a')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute()
    ->fetchObject();

  return $result;
}

/**
 * Saves statistics for a URL.
 */
function service_links_analytics_save($row) {
  $fields = (array) $row;
  unset($fields['entity_type']);
  unset($fields['entity_id']);
  return db_merge('service_links_analytics')
    ->key(array(
    'entity_type' => $row->entity_type,
    'entity_id' => $row->entity_id,
  ))
  ->fields($fields)
  ->execute();
}

function service_links_analytics_entity_load($entities, $type) {
  if ($type == 'node') {
    foreach ($entities as $entity) {
      list($id) = entity_extract_ids($type, $entity);
      $result = service_links_analytics_load($type, $id);
      if (!$result) {
        $queue = DrupalQueue::get('service_links_analytics');
        $data = array(
          'entity_type' => $type,
          'entity_id' => $id,
        );
        $queue->createItem($data);
      }
    }
  }
}

/**
 * Requests count from Google +1
 */
function service_links_analytics_google_plus_one_count($url) {
  $data = array(
    array(
      'method' => 'pos.plusones.get',
      'id' => 'p',
      'params' => array(
        'nolog' => TRUE,
        'id' => $url,
        'source' => 'widget',
        'userId' => '@viewer',
        'groupId' => '@self',
      ),
      'jsonrpc' => '2.0',
      'key' => 'p',
      'apiVersion' => 'v1',
    ),
  );

  $options = array(
    'data' => drupal_json_encode($data),
    'method' => 'POST',
  );
  $result = drupal_http_request('https://clients6.google.com/rpc?key=AIzaSyCKSbrvQasunBoV16zDH9R33D88CeLr9gQ', $options);
  $response = drupal_json_decode($result->data);
  return $response[0]['result']['metadata']['globalCounts']['count'];
}

/**
 * Implements hook_ctools_plugin_api().
 */
function service_links_analytics_ctools_plugin_api($module, $api) {
  if ($module == 'data' && $api == 'data_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function service_links_analytics_cron_queue_info() {
  $queues['service_links_analytics'] = array(
    'worker callback' => 'service_links_analytics_refresh',
  );
  return $queues;
}

function service_links_analytics_refresh($data) {
  $entities = entity_load($data->entity_type, array($data->entity_id), array(), FALSE);
  foreach ($entities as $entity) {
    $result = service_links_analytics_data($data->entity_type, $entity);
    if ($result) {
      $result->entity_type = $data->entity_type;
      $result->entity_id = $data->entity_id;
      $result->updated = time();
      service_links_analytics_save($result);
    }
  }
}
